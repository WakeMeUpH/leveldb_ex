# run as daemon process
--conf_daemonize=no

# server listen address
--conf_address=127.0.0.1

# server listen port
--conf_port=8800

# boost asio run threads
--conf_threads=10

# log severity level, 0-INFO, 1-WARN, 2-ERROR, 3-FATAL
--conf_min_log_level=0

# log directory
--conf_log_dir=./log/

# max log size(in MB), will roll files when exceeds the threshold
--conf_max_log_size=100

# leveldb directory
--conf_leveldb_dir=./db/

# If true, the database will be created if it is missing.
--conf_leveldb_create_if_missing=true

# If true, an error is raised if the database already exists.
--conf_leveldb_error_if_exits=false

# If true, the implementation will do aggressive checking of the
# data it is processing and will stop early if it detects any
# errors.  This may have unforeseen ramifications: for example, a
# corruption of one DB entry may cause a large number of entries to
# become unreadable or for the entire DB to become unopenable.
--conf_leveldb_paranoid_checks=false

# Amount of data to build up in memory (backed by an unsorted log
# on disk) before converting to a sorted on-disk file.
# Larger values increase performance, especially during bulk loads.
# Up to two write buffers may be held in memory at the same time,
# so you may wish to adjust this parameter to control memory usage.
# Also, a larger write buffer will result in a longer recovery time
# the next time the database is opened.
--conf_leveldb_write_buffer_size=4194304

# Number of open files that can be used by the DB.  You may need to
# increase this if your database has a large working set (budget
# one open file per 2MB of working set).
--conf_leveldb_max_open_files=1000

# Approximate size of user data packed per block.  Note that the
# block size specified here corresponds to uncompressed data.  The
# actual size of the unit read from disk may be smaller if
# compression is enabled.  This parameter can be changed dynamically.
--conf_leveldb_block_size=4096

# Number of keys between restart points for delta encoding of keys.
# This parameter can be changed dynamically.  Most clients should
# leave this parameter alone.
--conf_leveldb_block_restart_interval=16

# If true, all data read from underlying storage will be
# verified against corresponding checksums.
--conf_leveldb_read_verify_checksums=false

# Should the data read for this iteration be cached in memory?
# Callers may wish to set this field to false for bulk scans.
--conf_leveldb_read_fill_cache=true

# If true, the write will be flushed from the operating system
# buffer cache (by calling WritableFile::Sync()) before the write
# is considered complete.  If this flag is true, writes will be
# slower.
# If this flag is false, and the machine crashes, some recent
# writes may be lost.  Note that if it is just the process that
# crashes (i.e., the machine does not reboot), no writes will be
# lost even if sync==false.
# In other words, a DB write with sync==false has similar
# crash semantics as the "write()" system call.  A DB write
# with sync==true has similar crash semantics to a "write()"
# system call followed by "fsync()".
--conf_leveldb_write_sync=false


